A2 Assumptions:
---------------
	(1) Variable declarations that are the only sub-statement in a selection or loop compound statement are not tracked in the symbol table, because the variable has no scope elsewhere in the program, and no other operations make use of it.

		ex.
			if (x < 10)
				int y;

			/* y does not show up in symbol table */

	(2) The same name can be used for multiple symbols as long as the symbols are not created in the same scope.
		The most local symbol is used when multiple symbols at different scopes under the same name are present.
		
		ex. 
			/* error */
			int f(void) {
				int x;
				void x;
			}

			/* no errors */
			int f(void) {
				int x;
				/* typeof(x) == int */

				if (1) {
					void x;
					/* typeof(x) == void*/
				}
			}

			note: the variables can have the same type and still refer to different values in different scopes.
	(3)	Comparison expressions evaluate to an integer.
			
			ex.
				int x;
				if ((x>1) == 0) {
					/* valid */
				}
	(4) Undefined symbols are by default integers so further error handling can take place.
			
			ex.
				if (x > 1) {
					/* x is seen as int by semantic checker */
				}

	(5) Statements without side effects are not type checked because they will be optimized out by the compiler anyways.

			ex.
				int x[3];
				void y

				x[y]; /* == NOP */
				/* no error thrown because this does nothing */

	(6) Assignment operations evaluate to the left hande side of the assignment.
		Thus they can be used as conditions.

			ex.
				int x;
				if (x=1) { ... }

				is equivalent to:

				int x;
				x=1;
				if(x) { ... }

Building and Running the cm compiler:
	Type the following to perform the desired action.

	To build:
		'make' or 'make cm'

	To run: 
		'./cm <flags> <filename>'

	To clean build files and executables:
		'make clean'

.cm files:
	The 1.cm -> 5.cm files can be found in the 'files' subdirectory.